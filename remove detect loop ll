class Solution
{
    private:
       Node* detectLoop(Node* head)
    {
      Node*slow=head;
      Node*fast=head;
      
      if(head==NULL || head->next==NULL){
          return NULL;
      }

      while(slow!=NULL && fast!=NULL){
          fast=fast->next;
          if(fast!=NULL){
              fast=fast->next;
          }
          
          slow=slow->next;
          
          if(fast==slow){
              return slow;
          }
      } 
      
     return NULL;
    
    }
    
    Node*findFirstNode(Node* head)
    {
        if(head->next==head){
            return head;
        }
       Node*slow=head;
       Node*intersection=detectLoop(head);
       if(intersection==NULL){
           return NULL;
       }
       
    while(intersection!=slow){
        
        intersection=intersection->next;
           slow=slow->next;
       }    
         
         return slow;
    
  }
    
    public:
    //Function to remove a loop in the linked list.
   
    void removeLoop(Node* head)
    {
        // code here
        // just remove the loop without losing any nodes
         
         Node*startofloop=findFirstNode(head);
        if(startofloop==NULL){
            return;
        }
        Node*temp=startofloop;
        
        
        while(temp->next!=startofloop){
            temp=temp->next;
        }
        
        temp->next=NULL;
        
      return;
        
    }
};
